### Efficiency
In C++ string concatenation use append() instead of += or push_back()
-> push_back() only append chars
-> += append strings but create new object each time it concatenates
-> append() can take arg to append a substr of other string


### Difference in map and unordered_map C++ (Ref: GFG)

                  | map             | unordered_map
---------------------------------------------------------
Ordering        | increasing  order   | no ordering
                | (by default)        |

Implementation  | Self balancing BST  | Hash Table
                | like Red-Black Tree |  

search time     | log(n)              | O(1) -> Average 
                |                     | O(n) -> Worst Case

Insertion time  | log(n) + Rebalance  | Same as search
                      
Deletion time   | log(n) + Rebalance  | Same as search
#####################################################################################################################################################################################################

## Stacks and queues 

Beautiful problem:

link : https://www.interviewbit.com/old/problems/sliding-window-maximum/
Explanation link : https://www.youtube.com/watch?v=39grPZtywyQ

Prob : Given an array of integers A. There is a sliding window of size B which
is moving from the very left of the array to the very right.
You can only see the w numbers in the window. Each time the sliding window moves
rightwards by one position. You have to find the maximum for each window.
The following example will give you more clarity.

Hint : Brute force o(n2) , max heap O(nlogn), deque O(n)
deque: intuition is to maintain the max of window at front 
push_back each "index" one by one. Before each insertion check: 
1-> delete those indices at front which are invalid i.e which are out of window 
2-> delete those indicies front back in deque which are invalid i.e whose value is lesser than the value at current index. (because till current pointer the possible max values is what we are retaining)

################################################################################################################################################################################################################
Long Long Trick

Whenever multiplying int and saving it in long long , multiply the int values along with 1LL.
Then, in the final ans u can take modulo 10^9 + 7
e.g
long long res;
res = A[i]*A[j]*1LL; // A is a vector of int
result%1000000007;

########################################################################################################################################################################

Conversion int to str and vice versa using sstream

Very simple 

int s_to_i(string s){
    stringstream ss(s);
    int i=0;
    ss>>i;
    return i;
    //could ve used stoi() function
}

string i_to_s(int i){
    ostringstream ss;
    ss<<i;
    return ss.str();
    // couldve use to_string() function
    
}

##############################################################################################################################################################################

Hashing Tricky ques: Longest Subarray length
Given an integer array A of size N containing 0's and 1's only. 

You need to find the length of the longest subarray having count of 1’s one more than count of 0’s.

Q: https://www.interviewbit.com/problems/longest-subarray-length/


CRUX : Replace 0 by -1 to maintain the difference between the counts in 0 and 1 in hash

Now sum = sum+A[i]
if(hash.find(sum)!=hash.end()) hash[sum] = i
if sum == 1 then max_len = i + 1

if (hash.find(sum-1)!=hash.end()) then max_len = max_len < i - hash[sum-1] ? i-hash[sum-1] : max_len
// This means, If we remove length of indices whose sum is sum-1 from the length of indicies whose sum is s then we remain with the length of the subarray whose sum is 1



###############################################################################################################################################################################

