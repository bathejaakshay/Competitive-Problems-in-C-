### Efficiency
In C++ string concatenation use append() instead of += or push_back()
-> push_back() only append chars
-> += append strings but create new object each time it concatenates
-> append() can take arg to append a substr of other string


### Difference in map and unordered_map C++ (Ref: GFG)

                  | map             | unordered_map
---------------------------------------------------------
Ordering        | increasing  order   | no ordering
                | (by default)        |

Implementation  | Self balancing BST  | Hash Table
                | like Red-Black Tree |  

search time     | log(n)              | O(1) -> Average 
                |                     | O(n) -> Worst Case

Insertion time  | log(n) + Rebalance  | Same as search
                      
Deletion time   | log(n) + Rebalance  | Same as search
#####################################################################################################################################################################################################

## Stacks and queues 

Beautiful problem:

link : https://www.interviewbit.com/old/problems/sliding-window-maximum/
Explanation link : https://www.youtube.com/watch?v=39grPZtywyQ

Prob : Given an array of integers A. There is a sliding window of size B which
is moving from the very left of the array to the very right.
You can only see the w numbers in the window. Each time the sliding window moves
rightwards by one position. You have to find the maximum for each window.
The following example will give you more clarity.

Hint : Brute force o(n2) , max heap O(nlogn), deque O(n)
deque: intuition is to maintain the max of window at front 
push_back each "index" one by one. Before each insertion check: 
1-> delete those indices at front which are invalid i.e which are out of window 
2-> delete those indicies front back in deque which are invalid i.e whose value is lesser than the value at current index. (because till current pointer the possible max values is what we are retaining)

################################################################################################################################################################################################################
